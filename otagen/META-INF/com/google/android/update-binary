#!/sbin/sh
OUTFD=/proc/self/fd/$2;
ZIPFILE="$3";
DIR=`dirname "$ZIPFILE"`;

ui_print() {
  until [ ! "$1" ]; do
    echo -e "ui_print $1\nui_print" > $OUTFD;
    shift;
  done;
}
show_progress() { echo "progress $1 $2" > $OUTFD; }
file_getprop() { grep "^$2=" "$1" | cut -d= -f2; }
if [ ! "$(getprop 2>/dev/null)" ]; then
  getprop() {
    local propval="$(file_getprop /default.prop $1 2>/dev/null)";
    test "$propval" || local propval="$(file_getprop /system/build.prop $1 2>/dev/null)";
    test "$propval" && echo "$propval" || echo "";
  }
fi;
cleanup() { rm -rf /tmp/otapack; }
debugging() {
  case $(basename "$ZIPFILE" .zip) in
    *-debugging)
      ui_print "Creating debugging archive in zip directory...";
      $bb tar -czvf "$DIR/otapack2-$(date +%Y-%m-%d_%H%M%S)-debug.tgz" /tmp/*;
    ;;
  esac;
}
abort() {
  ui_print "$*";
  debugging;
  if [ ! -f /tmp/otapack/flashme.sh -o "$(file_getprop /tmp/otapack/flashme.sh do.cleanuponabort 2>/dev/null)" == 1 ]; then
    cleanup;
  fi;
  umount /system;
  umount /vendor 2>/dev/null;
  umount /data 2>/dev/null;
  exit 1;
}

show_progress 1.34 4;
cleanup;
mkdir -p /tmp/otapack/bin;
cd /tmp/otapack;
unzip -o "$ZIPFILE";
if [ $? != 0 -o -z "$(ls /tmp/otapack/tools)" ]; then
  abort "Unzip failed. Aborting...";
fi;
bb=/tmp/otapack/tools/busybox;
chmod 755 $bb;
$bb chmod -R 755 /tmp/otapack/tools /tmp/otapack/bin;

if [ -f /tmp/otapack/banner ]; then
  while IFS='' read -r line || $bb [[ -n "$line" ]]; do
    ui_print "$line";
  done < /tmp/otapack/banner;
fi;
device=$(sed -n 12p /tmp/otapack/author.prop);
cpu=$(sed -n 10p /tmp/otapack/author.prop);
cpum=$(sed -n 12p /tmp/otapack/author.prop);
author=$(sed -n 2p /tmp/otapack/author.prop);
bh=$(sed -n 8p /tmp/otapack/author.prop);
arch=$(sed -n 4p /tmp/otapack/author.prop);
loc=$(sed -n 18p /tmp/otapack/author.prop);
bt=$(sed -n 20p /tmp/otapack/author.prop);
ver=$(sed -n 22p /tmp/otapack/author.prop);
type=$(sed -n 24p /tmp/otapack/author.prop);
ui_print "********************************";
ui_print "            AKBÂ® fuldaros@4pda";
ui_print "********************************";
ui_print "Generated by:";
ui_print "  Automatic Kernel Builder(AKB)";
ui_print "  AKB ver: "$ver"";
ui_print "  Build type: "$type"";
ui_print "********************************";
ui_print "Info:";
ui_print "  Author: "$author"";
ui_print "  Host: "$bh"";
ui_print "  ARCH: "$arch"";
ui_print "  CPU: "$cpu"";
ui_print "  Device: "$device"";
ui_print "  Build time: "$bt"";
ui_print "********************************";
ui_print "Boot: "$loc"";
umount /system 2>/dev/null;
umount /vendor 2>/dev/null;
mount -o ro -t auto /system;
mount -o ro -t auto /vendor 2>/dev/null;
mount /data 2>/dev/null;
test -f /system/system/build.prop && root=/system;
  ui_print "Prepare...";

ui_print "Installing kernel...";
for i in $($bb --list); do
  $bb ln -s $bb /tmp/otapack/bin/$i;
done;
if [ $? != 0 -o -z "$(ls /tmp/otapack/bin)" ]; then
  abort "Recovery busybox setup failed. Aborting...";
fi;
PATH="/tmp/otapack/bin:$PATH" $bb ash /tmp/otapack/flashme.sh $2;
if [ $? != "0" ]; then
  abort;
fi;

if [ "$(file_getprop /tmp/otapack/flashme.sh do.modules)" == 1 ]; then
  ui_print "Pushing modules...";
  mount -o rw,remount -t auto /system;
  mount -o rw,remount -t auto /vendor 2>/dev/null;
  cd /tmp/otapack/modules;
  for module in $(find . -name '*.ko'); do
    case $module in
      */system/*) modtarget=$root/$module;;
      *) modtarget=/$module;;
    esac;
    if [ ! -e $modtarget ]; then
      case $module in
        */vendor/*) mod=vendor;;
        *) mod=system;;
      esac;
    fi;
    mkdir -p $(dirname $modtarget);
    $bb cp -rLf $module $modtarget;
    $bb chown 0:0 $modtarget;
    $bb chmod 644 $modtarget;
    if [ "$mod" ]; then
      chcon "u:object_r:${mod}_file:s0" $modtarget;
    fi;
  done;
  cd /tmp/otapack;
  mount -o ro,remount -t auto /system;
  mount -o ro,remount -t auto /vendor 2>/dev/null;
fi;

debugging;

if [ "$(file_getprop /tmp/otapack/flashme.sh do.cleanup)" == 1 ]; then
  cleanup;
fi;

umount /system;
umount /vendor 2>/dev/null;
umount /data 2>/dev/null;
ui_print "Done!";
ui_print "********************************";
